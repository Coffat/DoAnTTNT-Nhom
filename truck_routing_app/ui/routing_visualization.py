"""
Module for routing visualization and algorithm comparison.
This module provides the UI for visualizing different routing algorithms.
"""

import streamlit as st
import numpy as np
import time
from typing import List, Tuple, Dict
from core.algorithms.base_search import BaseSearch
from core.algorithms.bfs import BFS
from core.algorithms.dfs import DFS
from core.algorithms.astar import AStar
from core.algorithms.greedy import GreedySearch
from core.algorithms.hill_climbing import HillClimbing
from core.algorithms.local_beam import LocalBeamSearch
from ui.map_display import draw_map, draw_route

def draw_visualization_step(map_data, visited, current_pos, path=None, current_neighbors=None):
    """V·∫Ω m·ªôt b∆∞·ªõc c·ªßa thu·∫≠t to√°n v·ªõi c√°c hi·ªáu ·ª©ng tr·ª±c quan."""
    try:
        # V·∫Ω b·∫£n ƒë·ªì v·ªõi c√°c hi·ªáu ·ª©ng tr·ª±c quan
        draw_map(
            map_data=map_data,
            visited=visited,
            current_neighbors=current_neighbors,
            current_pos=current_pos,
            path=path
        )
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω b∆∞·ªõc tr·ª±c quan: {str(e)}")

def run_algorithm(algorithm_name: str, map_data: np.ndarray, start: Tuple[int, int], 
                 goal: Tuple[int, int]) -> Dict:
    """Ch·∫°y m·ªôt thu·∫≠t to√°n v√† tr·∫£ v·ªÅ k·∫øt qu·∫£."""
    # L·∫•y grid t·ª´ map_data
    grid = map_data.grid if hasattr(map_data, 'grid') else map_data
    
    # Kh·ªüi t·∫°o thu·∫≠t to√°n
    if algorithm_name == "BFS":
        algorithm = BFS(grid)
    elif algorithm_name == "DFS":
        algorithm = DFS(grid)
    elif algorithm_name == "A*":
        algorithm = AStar(grid)
    elif algorithm_name == "Greedy":
        algorithm = GreedySearch(grid)
    elif algorithm_name == "Hill Climbing":
        algorithm = HillClimbing(grid)
    elif algorithm_name == "Local Beam Search":
        algorithm = LocalBeamSearch(grid)
    else:
        st.error(f"Thu·∫≠t to√°n {algorithm_name} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!")
        return None
    
    # Ch·∫°y thu·∫≠t to√°n
    path = algorithm.search(start, goal)
    
    # L·∫•y th·ªëng k√™
    stats = algorithm.get_statistics()
    
    # X·ª≠ l√Ω th√™m cho BFS v√† DFS ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin v·ªÅ t√≠nh kh·∫£ thi
    if algorithm_name in ["BFS", "DFS"] and path:
        # Ki·ªÉm tra n·∫øu nhi√™n li·ªáu v·ªÅ 0, c√≥ th·ªÉ ƒë∆∞·ªùng ƒëi kh√¥ng kh·∫£ thi
        if stats["fuel"] <= 0:
            stats["is_feasible"] = False
            stats["reason"] = "H·∫øt nhi√™n li·ªáu tr√™n ƒë∆∞·ªùng ƒëi"
        else:
            stats["is_feasible"] = True
            stats["reason"] = "ƒê∆∞·ªùng ƒëi kh·∫£ thi"
    else:
        # C√°c thu·∫≠t to√°n kh√°c ƒë√£ x√©t r√†ng bu·ªôc trong qu√° tr√¨nh t√¨m ki·∫øm
        stats["is_feasible"] = True if path else False
        stats["reason"] = "ƒê∆∞·ªùng ƒëi kh·∫£ thi" if path else "Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng ƒëi kh·∫£ thi"
    
    return {
        "path": path,
        "visited": algorithm.get_visited(),
        "stats": stats
    }

def render_routing_visualization():
    """Render tab ƒë·ªãnh tuy·∫øn v√† t·ªëi ∆∞u h·ªá th·ªëng."""
    st.markdown("## üó∫Ô∏è ƒê·ªãnh Tuy·∫øn & T·ªëi ∆Øu H·ªá Th·ªëng")
    
    # Ki·ªÉm tra xem ƒë√£ c√≥ b·∫£n ƒë·ªì ch∆∞a
    if "map" not in st.session_state:
        st.warning("‚ö†Ô∏è Vui l√≤ng t·∫°o b·∫£n ƒë·ªì tr∆∞·ªõc khi s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y!")
        return
    
    # Ki·ªÉm tra v·ªã tr√≠ b·∫Øt ƒë·∫ßu v√† ƒëi·ªÉm ƒë√≠ch
    if "start_pos" not in st.session_state or st.session_state.start_pos is None:
        st.warning("‚ö†Ô∏è Vui l√≤ng thi·∫øt l·∫≠p v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa xe!")
        return
    
    if "end_pos" not in st.session_state or st.session_state.end_pos is None:
        st.warning("‚ö†Ô∏è Vui l√≤ng thi·∫øt l·∫≠p ƒëi·ªÉm ƒë√≠ch!")
        return
    
    # T·∫°o layout ch√≠nh
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Container cho b·∫£n ƒë·ªì v√† tr·ª±c quan
        map_container = st.empty()
        
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì ban ƒë·∫ßu
        with map_container:
            draw_map(st.session_state.map)
    
    with col2:
        # Ch·ªçn thu·∫≠t to√°n
        st.markdown("### üîç Ch·ªçn thu·∫≠t to√°n")
        algorithm = st.selectbox(
            "Thu·∫≠t to√°n t√¨m ƒë∆∞·ªùng:",
            ["BFS", "DFS", "A*", "Greedy", "Hill Climbing", "Local Beam Search"],
            help="Ch·ªçn thu·∫≠t to√°n ƒë·ªÉ t√¨m ƒë∆∞·ªùng ƒëi t·ªëi ∆∞u"
        )
        
        # L∆∞u thu·∫≠t to√°n ƒë√£ ch·ªçn v√†o session state
        st.session_state.algorithm = algorithm
        
        # Hi·ªÉn th·ªã m√¥ t·∫£ thu·∫≠t to√°n
        algorithm_descriptions = {
            "BFS": "T√¨m ki·∫øm theo chi·ªÅu r·ªông, ƒë·∫£m b·∫£o t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t.",
            "DFS": "T√¨m ki·∫øm theo chi·ªÅu s√¢u, th√≠ch h·ª£p cho kh√¥ng gian t√¨m ki·∫øm l·ªõn.",
            "A*": "K·∫øt h·ª£p t√¨m ki·∫øm t·ªët nh·∫•t v√† heuristic, t·ªëi ∆∞u v√† hi·ªáu qu·∫£. T·ª± ƒë·ªông ∆∞u ti√™n t√¨m tr·∫°m xƒÉng khi s·∫Øp h·∫øt nhi√™n li·ªáu.",
            "Greedy": "Lu√¥n ch·ªçn b∆∞·ªõc ƒëi c√≥ v·∫ª t·ªët nh·∫•t t·∫°i th·ªùi ƒëi·ªÉm hi·ªán t·∫°i.",
            "Hill Climbing": "T√¨m ki·∫øm c·ª•c b·ªô, lu√¥n di chuy·ªÉn theo h∆∞·ªõng t·ªët h∆°n.",
            "Local Beam Search": "Duy tr√¨ nhi·ªÅu tr·∫°ng th√°i c√πng l√∫c, tƒÉng kh·∫£ nƒÉng t√¨m ki·∫øm."
        }
        st.info(algorithm_descriptions[algorithm])
        
        # N√∫t t√¨m ƒë∆∞·ªùng
        if st.button("üîç T√¨m ƒë∆∞·ªùng", use_container_width=True):
            with st.spinner("üîÑ ƒêang t√¨m ƒë∆∞·ªùng..."):
                try:
                    result = run_algorithm(
                        algorithm,
                        st.session_state.map,
                        st.session_state.start_pos,
                        st.session_state.end_pos
                    )
                    if result:
                        st.session_state.current_result = result
                        st.session_state.visualization_step = 0
                        st.session_state.is_playing = False
                        st.success("‚úÖ ƒê√£ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi!")
                    else:
                        st.error("‚ùå Kh√¥ng th·ªÉ t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng ƒëi!")
                except Exception as e:
                    st.error(f"‚ùå L·ªói khi th·ª±c thi thu·∫≠t to√°n: {str(e)}")
                    return
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
    if "current_result" in st.session_state:
        st.markdown("### üìä K·∫øt qu·∫£ t√¨m ƒë∆∞·ªùng")
        
        # Hi·ªÉn th·ªã th·ªëng k√™
        stats = st.session_state.current_result["stats"]
        algorithm = st.session_state.algorithm if "algorithm" in st.session_state else ""
        
        # Hi·ªÉn th·ªã t√≠nh kh·∫£ thi ƒë·ªëi v·ªõi BFS v√† DFS
        if algorithm in ["BFS", "DFS"]:
            is_feasible = stats.get("is_feasible", False)
            reason = stats.get("reason", "")
            
            if is_feasible:
                st.success(f"‚úÖ ƒê∆∞·ªùng ƒëi kh·∫£ thi")
            else:
                st.error(f"‚ùå ƒê∆∞·ªùng ƒëi kh√¥ng kh·∫£ thi: {reason}")
        
        # T·∫°o layout cho th·ªëng k√™
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("S·ªë b∆∞·ªõc th·ª±c hi·ªán", stats["steps"])
            st.metric("S·ªë √¥ ƒë√£ thƒÉm", stats["visited"])
        with col2:
            st.metric("ƒê·ªô d√†i ƒë∆∞·ªùng ƒëi", stats["path_length"])
            st.metric("XƒÉng c√≤n l·∫°i", f"{stats['fuel']:.1f}l")
        with col3:
            st.metric("Chi ph√≠ tr·∫°m thu ph√≠", f"{stats['toll_cost']}ƒë")
            st.metric("T·ªïng chi ph√≠", f"{stats['total_cost']}ƒë")
        
        # ƒêi·ªÅu khi·ªÉn tr·ª±c quan
        st.markdown("### üé¨ Tr·ª±c quan h√≥a thu·∫≠t to√°n")
        
        # ƒêi·ªÅu khi·ªÉn t·ªëc ƒë·ªô
        speed = st.slider(
            "T·ªëc ƒë·ªô hi·ªÉn th·ªã:",
            min_value=1,
            max_value=10,
            value=5,
            help="ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô hi·ªÉn th·ªã (1: ch·∫≠m nh·∫•t, 10: nhanh nh·∫•t)"
        )
        
        # N√∫t ƒëi·ªÅu khi·ªÉn
        control_cols = st.columns(4)
        with control_cols[0]:
            if st.button("‚èÆÔ∏è V·ªÅ ƒë·∫ßu", use_container_width=True):
                st.session_state.visualization_step = 0
                st.session_state.is_playing = False
        with control_cols[1]:
            if st.button("‚ñ∂Ô∏è Ch·∫°y/T·∫°m d·ª´ng", use_container_width=True):
                st.session_state.is_playing = not st.session_state.is_playing
        with control_cols[2]:
            if st.button("‚è≠Ô∏è K·∫øt th√∫c", use_container_width=True):
                st.session_state.visualization_step = len(st.session_state.current_result["visited"])
                st.session_state.is_playing = False
        with control_cols[3]:
            if st.button("üîÑ L√†m m·ªõi", use_container_width=True):
                st.session_state.visualization_step = 0
                st.session_state.is_playing = False
        
        # Thanh ti·∫øn tr√¨nh
        if "visualization_step" not in st.session_state:
            st.session_state.visualization_step = 0
        
        total_steps = len(st.session_state.current_result["visited"])
        current_step = st.session_state.visualization_step
        progress = float(current_step) / total_steps if total_steps > 0 else 0
        st.progress(progress, text=f"B∆∞·ªõc {current_step}/{total_steps}")
        
        # X·ª≠ l√Ω animation
        visited = st.session_state.current_result["visited"]
        path = st.session_state.current_result["path"]
        
        if st.session_state.is_playing and current_step < total_steps:
            # Hi·ªÉn th·ªã b·∫£n ƒë·ªì v·ªõi c√°c √¥ ƒë√£ thƒÉm
            current_visited = visited[:current_step + 1]
            current_pos = visited[current_step]
            
            # L·∫•y c√°c √¥ h√†ng x√≥m c·ªßa v·ªã tr√≠ hi·ªán t·∫°i
            current_neighbors = []
            if hasattr(st.session_state.map, 'get_neighbors'):
                current_neighbors = st.session_state.map.get_neighbors(current_pos)
            
            # V·∫Ω b∆∞·ªõc hi·ªán t·∫°i
            with map_container:
                draw_visualization_step(
                    st.session_state.map,
                    current_visited,
                    current_pos,
                    path if current_step == total_steps - 1 else None,
                    current_neighbors
                )
            
            # TƒÉng b∆∞·ªõc v√† ƒë·ª£i
            time.sleep(1.0 / speed)
            st.session_state.visualization_step += 1
            st.rerun()
        else:
            # Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
            if current_step < total_steps:
                current_visited = visited[:current_step + 1]
                current_pos = visited[current_step]
                current_neighbors = []
                if hasattr(st.session_state.map, 'get_neighbors'):
                    current_neighbors = st.session_state.map.get_neighbors(current_pos)
                
                with map_container:
                    draw_visualization_step(
                        st.session_state.map,
                        current_visited,
                        current_pos,
                        path if current_step == total_steps - 1 else None,
                        current_neighbors
                    )
            else:
                # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng v·ªõi ƒë∆∞·ªùng ƒëi
                with map_container:
                    draw_visualization_step(
                        st.session_state.map,
                        visited,
                        None,
                        path
                    ) 